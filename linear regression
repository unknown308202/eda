#linear regresiion 
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Load the dataset from CSV file
df = pd.read_csv("C:\\Users\\bhumi\\OneDrive\\Desktop\\DAPP\\used_cars_data.csv")

# Assuming 'feature_column' is the feature column and 'target_column' is the target column
feature_column = 'Price'
target_column = 'Kilometers_Driven'

# Drop rows with NaN values in feature or target columns
df = df.dropna(subset=[feature_column, target_column])

# Alternatively, you can fill NaN values with the mean or median of the column
# df[feature_column] = df[feature_column].fillna(df[feature_column].mean())
# df[target_column] = df[target_column].fillna(df[target_column].mean())

# Extract features (X) and target variable (y)
X = df[[feature_column]]
y = df[target_column]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and fit the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = model.predict(X_test)

# Calculate the mean squared error
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

# Plot the regression line
plt.scatter(X_test, y_test, color='blue')
plt.plot(X_test, y_pred, color='red')
plt.title('Linear Regression')
plt.xlabel('Feature')
plt.ylabel('Target')
plt.show()
