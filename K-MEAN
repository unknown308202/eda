import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler
%matplotlib inline

df = pd.read_csv("income.csv")
df.head()

plt.scatter(df['Age'] , df['Income($)'])

km = KMeans(n_clusters=3)
km

y_predicted = km.fit_predict(df[['Age','Income($)']])
y_predicted

df['cluster'] = y_predicted
df

df1 = df[df.cluster == 0]
df2 = df[df.cluster == 1]
df3 = df[df.cluster == 2]

plt.scatter(df1.Age , df1['Income($)'] , color = "green" )
plt.scatter(df2.Age , df2['Income($)'] , color = "red")
plt.scatter(df3.Age , df3['Income($)'] , color="black")

plt.xlabel("Age")
plt.ylabel("Income($)")
plt.legend()


#SINCE CLUSTERS ARE NOT PROPERLY FORMED SO WE NEED TO ADJUST THE SCALE 
scaler = MinMaxScaler()
scaler.fit(df[['Income($)']])
df['Income($)'] = scaler.transform(df[['Income($)']])

scaler.fit(df[['Age']])
df.Age = scaler.transform(df[['Age']])

df

km = KMeans(n_clusters=3)
y_predicted = km.fit_predict(df[['Age','Income($)']])
y_predicted

df['new_clusters'] = y_predicted
df

k_rng = range(1,10)
sse = []
for k in k_rng :
    km = KMeans(n_clusters=k)
    km.fit(df[['Age','Income($)']])
    sse.append(km.inertia_)

df1 = df[df.new_clusters == 0]
df2 = df[df.new_clusters == 1]
df3 = df[df.new_clusters == 2]

plt.scatter(df1.Age , df1['Income($)'] , color = "green" )
plt.scatter(df2.Age , df2['Income($)'] , color = "red")
plt.scatter(df3.Age , df3['Income($)'] , color="black")

plt.scatter(km.cluster_centers_[:,0] , km.cluster_centers_[:,1] , color = 'purple' , marker ="*")

plt.legend()
